{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    'clearfix',
  ]
%}

{% set stats_count = node.field_statistic.getvalue|length %}
{% if content.field_program_cost.0 %}
  {% set stats_count = stats_count + 1 %}
{% endif %}
{% set stats_row_class = '' %}
{% if stats_count == 1 %}
  {% set stats_row_class = 'col-sm-12' %}
{% elseif stats_count == 2 %}
  {% set stats_row_class = 'col-sm-6' %}
{% elseif stats_count == 3 %}
  {% set stats_row_class = 'col-sm-4' %}
{% elseif stats_count == 4 %}
  {% set stats_row_class = 'col-sm-3' %}
{% endif %}

{% set program_stats_count = node.field_program_stats.getvalue|length %}
{% set program_stats_row_class = '' %}
{% if program_stats_count == 1 %}
  {% set program_stats_row_class = 'col-sm-12' %}
{% elseif program_stats_count == 2 %}
  {% set program_stats_row_class = 'col-sm-6' %}
{% elseif program_stats_count == 3 %}
  {% set program_stats_row_class = 'col-sm-4' %}
{% elseif program_stats_count == 4 %}
  {% set program_stats_row_class = 'col-sm-3' %}
{% endif %}

<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}
{#{ kint(content|keys) }#}
  <div{{ content_attributes.addClass('content') }}>
    {#{ content }#}
    <section{{ content_attributes.addClass('container', 'program') }}>
      <div class="row program-header">
        <h2 class="page-title">Program <span class="green">Overview</span></h3>
        <h3 class="program-name">{{ label }}</h3>
      </div>
      <div class="row program-info-row">
        <div class="col-sm-6">
          {{ content.field_program_image }}
        </div>
        <div class="col-sm-6">
          {{ content.field_description }}

          {% if content.field_rich_text.0 %}
            <br />
            {{ content.field_rich_text }}
          {% endif %}
          {# application deadline and apply btn here #}
          <div class="row apply-row">
            <div class="app-deadline green col-sm-6">Next Application Deadline is <strong>July 1</strong></div>
            <div class="apply col-sm-6">
              <a class="apply-btn btn btn-lg">Apply Now</a>
            </div>
          </div>
        </div>
      </div>
      {% if stats_count > 0 %}
        <div class="row stats-row">
          {% if content.field_program_cost.0 %}
            <div class="{{ stats_row_class }}">
              <div class="paragraph--type--statistic">
                <div class="stat">
                  <div class="field--name-field-data">
                    ${{ content.field_program_cost.0 }}
                  </div>
                  <h4 class="stat-title">Program Cost</h4>
                </div>
              </div>
            </div>
          {% endif %}
          {% for key, stat in content.field_statistic if key|first!='#' %}
            <div class="{{ stats_row_class }}">
              {{ stat }}
            </div>
          {% endfor %}
        </div>
      {% endif %}
    </section>

    {# slideshow here #}

    {% if program_stats_count > 0 %}
      <section class="program-stats-wrapper program">
        <div{{ content_attributes.addClass('container') }}>
          <h3 class="section-title">Program <span class="green">Stats</span></h3>
          <div class="row program-stats-row">
            {% for key, stat in content.field_program_stats if key|first!='#' %}
              <div class="{{ program_stats_row_class }}">
                {{ stat }}
              </div>
            {% endfor %}
          </div>
        </div>
      </section>
    {% endif %}

    {% set upcoming_event = drupal_view('events', 'upcoming_program_events') %}
    {% if upcoming_event|render|striptags|trim != '' %}
      <section {{ content_attributes }}>
        <h3 class="section-title">Upcoming Program <span class="green">Events</span></h3>
        <div class="row">
          {{ upcoming_event }}
        </div>
      </section>
    {% endif %}

    {% if content.field_program_printable.0 %}
      <div class="container printable">
        <h3 class="section-title">Printable</h3>
        {{ content.field_program_printable }}
      </div>
    {% endif %}

    {% set required_classes = drupal_view('required_classes', 'required_classes') %}
    {% if required_classes|render|striptags|trim != '' %}
      <section class="container required-classes">
        <h3 class="section-title">Required <span class="green">Courses</span></h3>
        {{ required_classes }}
      </div>
    {% endif %}
  </div>

</article>
